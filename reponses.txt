Réponses aux question de la partie UML : 

- A quoi sert la classe AbstractRunChat ?
  Pour faire de la factorisation de code en ne donnant qu'une implémentation partielle.


- Expliquez la relation ChatServer / InputOutputClient concrétisée par l’attribut « clients ».
  clients sert à créer un tableau (vecteur) de clients dans le serveur.

- Expliquez la relation ClientHandler / InputClient concrétisée par l’attribut « mainClient ».
  mainClient pour créer le client principal du serveur.


- Expliquez la relation ClientHandler / InputOutputClient concrétisée par l’attribut « allClients ».
  allClients vecteur de tous les autres clients reliés au serveur.


- Combien de threads tournent sur un serveur dans le scénario présenté par la Figure 1 (page 1) ? 
  Détaillez votre réponse en précisant qui lance qui.
  2 threads :
    Le serveur se met en écoute de chaque client il crée un thread pour chacun 

- Combien de threads tournent dans le Client 1 du scénario présenté par la Figure 1 (page 1) ?
  Détaillez votre réponse en précisant qui lance qui.
  3 threads :
    1 thread par défault
    1 thread pour communiquer avec le serveur
    1 thread pour l'utilisateur

- A quoi sert le threads[i].join() à la fin du run de ChatClient ?
  Bloque le thread appelant jusqu’à ce que le thread représenté par cette instance s’arrête.

- Que représente la classe ChatClient dans le cadre d’une architecture MVC ?
  le client est un MVC ; c'est pour découper le logiciel en trois partie : Modèle, Vue et Controleur qui fait le lien entre la vue et le modèle.

